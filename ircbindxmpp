#!/usr/bin/env python3

# TODO: 多行消息前每行消息加用户昵称
#       被踢自动重连
#       IRC 昵称变化

import re
import sys
import logging
import socket
import time
from functools import partial

from xmppbot import XMPPBot, message_stanza_handler, XMPPSettings
from pyxmpp2.mainloop.tornado import TornadoMainLoop
import tornado.iostream
import tornado.ioloop

from config import *

logger = logging.getLogger(__name__)

CONTROLCHARS = re.compile('[\x00-\x1f]')
COLORS = re.compile(r'\x03\d+(?:,\d+)?')

def splitmsg(m, size):
  b = m.encode('utf-8')
  if len(b) <= size:
    yield m
  else:
    prefix = b[:size].decode('utf-8', errors='ignore')
    yield prefix
    yield from splitmsg(m[len(prefix):], size)

class IrcBot(XMPPBot):
  def __init__(self, my_jid, settings, ircconfig):
    self.irc = IRC(ircconfig, self)
    super().__init__(my_jid, settings, autoReconnect=True,
                     main_loop=TornadoMainLoop())

  def start(self):
    self.irc.connect()
    self.cb = tornado.ioloop.PeriodicCallback(self.write_space, 3600000)
    self.cb.start()
    super().start()

  def disconnect(self):
    self.irc.disconnect()
    self.cb.stop()
    super().disconnect()

  def write_space(self):
    logging.info('sending space')
    self.client.stream.transport._write(b' ')

  @message_stanza_handler()
  def handle_message(self, stanza):
    if stanza.body is None:
      return
    if stanza.from_jid.bare() == targetJID:
      self.send2irc(stanza.body)
    else:
      self.send_message(stanza.from_jid, "I'm a bot NOT working for you.")
      logging.warn('unhandled message from %s: %s', stanza.from_jid.bare(), stanza.body)
    return True

  def send2irc(self, msg):
    try:
      self.irc.sendmsg(msg)
    except IOError:
      logging.warn('IRC disconnected. Reconnecting...')
      self.irc.connect()
      self.irc.pending(msg)

  def sendmsg(self, msg):
    logging.info('sending to xmpp: %s', msg)
    self.send_message(targetJID, msg)

class IRC:
  _watchdog_to = None
  _time_out = 200

  def __init__(self, config, xmpp):
    self._io_loop = tornado.ioloop.IOLoop.current()
    self._xmpp = xmpp
    self._joined = False

    ch = config['channel']
    if ch[0] != '#':
      ch = '#' + ch
    self.channel = ch
    self.nick = config['nick']
    self.host = config['host']
    self.realname = config['realname']
    self.server = config['server']
    self.password = config.get('password', None)

  def _kick_watchdog(self):
    t = time.time()
    loop = self._io_loop

    if self._watchdog_to:
      loop.remove_timeout(self._watchdog_to)
    self._watchdog_to = loop.add_timeout(
      t + self._time_out,
      partial(self.connect, reconnect=True)
    )

  def send(self, cmd, *args, callback=None):
    args = list(args)
    if args and \
       (not args[-1] or args[-1][0] == ':' or re.search(r'\s', args[-1])):
      args[-1] = ":" + args[-1]
    cmd = cmd.upper()
    args.insert(0, cmd)

    logger.debug('send: %s', args)
    d = ' '.join(args).encode('utf-8') + b'\r\n'
    self.iostream.write(d, callback)

  def connect(self, reconnect=False):
    if reconnect:
      try:
        self.disconnect()
      except tornado.iostream.StreamClosedError:
        pass

    sock = socket.socket()
    self._pending_msg = None
    if ssl:
      self.iostream = tornado.iostream.SSLIOStream(sock)
    else:
      self.iostream = tornado.iostream.IOStream(sock)
    logging.info('connecting to irc server %r...', self.server)
    self.iostream.connect(
      self.server,
      partial(self._read_and_discard, self._nick),
      server_hostname = self.server[0],
    )
    self._kick_watchdog()

  def disconnect(self):
    logging.info('quit irc...')
    self.send('QUIT')
    self.iostream.close()

  def _read_and_discard(self, callback):
    self.iostream.read_until(b'\r\n', callback)

  def _nick(self, nothing):
    logging.debug('recved: %s', nothing)
    logging.info('set my nick')
    self.send(
      'NICK', self.nick,
      callback = self._user,
    )

  def _user(self):
    logging.info('the user command')
    self.send('USER', self.nick, self.nick, self.host, self.realname)
    self.iostream.read_until(b'/MOTD', self._join)

  def _join(self, nothing):
    self._kick_watchdog()
    logging.debug('recved: %s', nothing)
    if self.password:
      logging.info('identifying...')
      self.send('PRIVMSG', 'NickServ', 'identify %s %s' % (
        self.nick, self.password,
      ))
    logging.info('joining...')
    self.send('JOIN', self.channel)
    self._joined = True
    if self._pending_msg:
      logging.info('sending pending msg...')
      self.sendmsg(self._pending_msg)
    self.iostream.read_until(b'\r\n', self.message_received)

  def pending(self, msg):
    '''make a new message sent when connected and joined'''
    self._pending_msg = msg

  def message_received(self, msg):
    self._kick_watchdog()
    msg = msg[:-2]
    is_gbk = False
    try:
      msg = msg.decode()
    except UnicodeDecodeError:
      try:
        msg = msg.decode('gb18030')
        is_gbk = True
      except UnicodeDecodeError:
        msg = msg.decode(errors='replace')
    logging.debug('irc received: %s', msg)
    try:
      self.iostream.read_until(b'\r\n', self.message_received)
    except tornado.iostream.StreamClosedError:
      logging.warn('IRC server closed the connection.')
      self.connect(reconnect=True)
      return
    if msg.startswith('PING :'):
      self.pong(msg)
      return
    try:
      user, cmd, who, msg = msg.split(None, 3)
    except ValueError:
      return
    if cmd != 'PRIVMSG':
      return
    if who != self.channel:
      return
    try:
      msg = msg[1:]
      if msg.startswith('\x01ACTION '):
        msg = '*' + msg[7:-1]
    except IndexError:
      return
    username = user[1:user.find('!')]
    if is_gbk:
      msg = '(in GBK) ' + msg
    msg = COLORS.sub('', msg)
    msg = CONTROLCHARS.sub('', msg)
    self._xmpp.sendmsg('[%s] %s' % (username, msg))

  def pong(self, msg):
    self._kick_watchdog()
    self.send('PONG', self.nick)
    logging.info('PONG sent')

  def sendmsg(self, msg):
    if not self._joined:
      return
    logging.info('sending to irc: %s', msg)
    self._kick_watchdog()
    # 'PRIVMSG' ' ' channel ' ' ':' msg '\r\n'
    # 300 is assumed max length
    size = 300 - (12 + len(self.channel))
    for line in msg.split('\n'):
      for m in splitmsg(line, size):
        self.send('PRIVMSG', self.channel, m)

def main():
  settings = XMPPSettings({
    "software_name": "IrcBot",
    'starttls': True,
    'password': password,
    'tls_verify_peer': False,
    'software_os': 'Linux',
  })

  try:
    settings['server'] = xmpp_server
  except NameError:
    pass

  if False:
    print("enabling trace")
    handler = logging.StreamHandler()
    handler.setLevel(logging.DEBUG)
    for logger in ("pyxmpp2.IN", "pyxmpp2.OUT"):
      logger = logging.getLogger(logger)
      logger.setLevel(logging.DEBUG)
      logger.addHandler(handler)
      logger.propagate = False

  bot = IrcBot(BotJID, settings, irc_config)
  try:
    bot.start()
  except KeyboardInterrupt:
    bot.disconnect()

if __name__ == '__main__':
  import argparse
  import nicelogger

  parser = argparse.ArgumentParser(
    description='Connect XMPP and IRC channel together')
  parser.add_argument('-l', '--logging',
                      choices=('debug', 'info', 'warning', 'error'), default='info',
                      help='logging level (default: info)')
  args = parser.parse_args()
  nicelogger.enable_pretty_logging(getattr(logging, args.logging.upper()))

  main()
