#!/usr/bin/env python3
# vim:fileencoding=utf-8

# TODO: 多行消息前每行消息加用户昵称
#       被踢自动重连

import sys
import logging
import socket
from functools import partial

from myutils import enable_pretty_logging
enable_pretty_logging(logging.DEBUG)

from xmppbot import XMPPBot, message_stanza_handler, XMPPSettings
from pyxmpp2.mainloop.tornado import TornadoMainLoop
import tornado.iostream

from config import *

class IrcBot(XMPPBot):
  def __init__(self, my_jid, settings, ircconfig):
    self.irc = IRC(ircconfig, self)
    super().__init__(my_jid, settings, autoReconnect=True,
                     main_loop=TornadoMainLoop())

  def start(self):
    self.irc.connect()
    super().start()

  def disconnect(self):
    self.irc.disconnect()
    super().disconnect()

  @message_stanza_handler()
  def handle_message(self, stanza):
    if stanza.body is None:
      return
    if stanza.from_jid.bare() == targetJID:
      self.send2irc(stanza.body)
    else:
      self.send_message(stanza.from_jid, "I'm a bot NOT working for you.")
      logging.warn('unhandled message from %s: %s', stanza.from_jid.bare(), stanza.body)
    return True

  def send2irc(self, msg):
    try:
      self.irc.sendmsg(msg)
    except IOError:
      logging.warn('IRC disconnected. Reconnecting...')
      self.irc.connect()
      self.irc.pending(msg)

  def sendmsg(self, msg):
    logging.info('sending to xmpp: %s', msg)
    self.send_message(targetJID, msg)

class IRC:
  def __init__(self, config, xmpp):
    self.config = config
    self.xmpp = xmpp
    self.joined = False

  def connect(self):
    sock = socket.socket()
    self._pending_msg = None
    self.iostream = tornado.iostream.IOStream(sock)
    server = self.config['server']
    logging.info('connecting to irc server %r...', server)
    self.iostream.connect(server, partial(self._read_and_discard, self._nick))
    self.pong = ('PONG %s' % server[0]).encode()

  def disconnect(self):
    logging.info('quit irc...')
    self.write(b'QUIT')

  def _read_and_discard(self, callback):
    self.iostream.read_until(b'\r\n', callback)

  def _nick(self, nothing):
    logging.info('set my nick')
    self.write(
      ('NICK %s' % self.config['nick']),
      self._user,
    )

  def _user(self):
    logging.info('the user command')
    self.write(('USER {nick} {nick} {host} :{realname}'.format_map(
      self.config)))
    self.iostream.read_until(b'/MOTD', self._join)

  def _join(self, nothing):
    passwd = self.config.get('password', None)
    if passwd:
      logging.info('identifying...')
      self.write(('PRIVMSG NickServ :identify %s %s' % (
        self.config['nick'],
        passwd,
      )))
    logging.info('joining...')
    self.write(('JOIN #%s\r\n' % self.config['channel']))
    self.joined = True
    if self._pending_msg:
      logging.info('sending pending msg...')
      self.sendmsg(self._pending_msg)
    self.iostream.read_until(b'\r\n', self.message_received)

  def pending(self, msg):
    '''make a new message sent when connected and joined'''
    self._pending_msg = msg

  def message_received(self, msg):
    msg = msg[:-2].decode(errors='replace')
    logging.debug('irc received: %s', msg)
    self.iostream.read_until(b'\r\n', self.message_received)
    if msg.startswith('PING :'):
      self.write(self.pong)
      return
    try:
      user, cmd, who, msg = msg.split(None, 3)
    except ValueError:
      return
    if cmd != 'PRIVMSG':
      return
    if who != '#' + self.config['channel']:
      return
    username = user[1:user.find('!')]
    if who == 'xmppbot':
	  self.xmpp.sendmsg('-%s' % msg, username)
	  return
	self.xmpp.sendmsg('[%s] %s' % (username, msg[1:]))

  def sendmsg(self, msg, dest=None):
    if not self.joined:
      return
    logging.info('sending to irc: %s', msg)
    ch = self.config['channel']
	if dest is None:
		dest = '#' + str(ch)
    for m in msg.split('\n'):
      self.write(('PRIVMSG #%s :%s' % (dest, m)))

  def write(self, msg, cb=None):
    logging.debug('Writing to IRC stream: %s', msg)
    if isinstance(msg, str):
      msg = msg.encode('utf-8')
    self.iostream.write(msg + b'\r\n', cb)

def main():
  settings = XMPPSettings({
    "software_name": "IrcBot",
    'starttls': True,
    'password': password,
    'tls_verify_peer': False,
    'software_os': 'Linux',
  })

  try:
    settings['server'] = xmpp_server
  except NameError:
    pass

  if False:
    print("enabling trace")
    handler = logging.StreamHandler()
    handler.setLevel(logging.DEBUG)
    for logger in ("pyxmpp2.IN", "pyxmpp2.OUT"):
      logger = logging.getLogger(logger)
      logger.setLevel(logging.DEBUG)
      logger.addHandler(handler)
      logger.propagate = False

  bot = IrcBot(BotJID, settings, irc_config)
  try:
    bot.start()
  except KeyboardInterrupt:
    bot.disconnect()

if __name__ == '__main__':
  main()
