#!/usr/bin/env python3

from __future__ import annotations

# TODO: 多行消息前每行消息加用户昵称
#       被踢自动重连
#       IRC 昵称变化

import re
import logging
import asyncio
from asyncio import Queue
from typing import Any, Dict
import signal

import aioxmpp
import aioxmpp.dispatcher
import toml

logger = logging.getLogger(__name__)

CONTROLCHARS = re.compile('[\x00-\x1f]')
COLORS = re.compile(r'\x03\d+(?:,\d+)?')
TG_MSG = re.compile(r'\[(?P<nick>[^]]+)\] (?:「Re (?P<reply>[^:]+): (?P<reply2>\[[^]]+\])?[^」]*」)?(?P<msg>.+)$')
TG_BOTS = ['teleboto', 'teleboto_', 'tg2arch', 'tg2offtopic']
TOX_MSG = re.compile(r'\((?P<nick>[^)]+)\) (?P<msg>.+)$')
TOX_BOT = 'toxsync'
XMPP_BOT = 'xmppbot'

def splitmsg(m, size):
  b = m.encode('utf-8')
  if len(b) <= size:
    yield m
  else:
    prefix = b[:size].decode('utf-8', errors='ignore')
    yield prefix
    yield from splitmsg(m[len(prefix):], size)

class XmppBot:
  _connected = asyncio.Event()

  def __init__(self, config: Dict[str, Any], qin: Queue[str], qout: Queue[str]) -> None:
    self.qin = qin
    self.qout = qout

    self.jid = aioxmpp.JID.fromstr(config['bot'])
    self.group = aioxmpp.JID.fromstr(config['group'])
    self.client = aioxmpp.PresenceManagedClient(
      self.jid,
      aioxmpp.make_security_layer(
        config['password'],
        no_verify = not config.get('verify_cert', True),
      ),
    )
    self.client.resumption_timeout = 10

  def message_received(self, msg: aioxmpp.Message) -> None:
    if not msg.body:
      return

    text = msg.body.any()
    if msg.from_.bare() == self.group:
      self.qout.put_nowait(text)
    else:
      reply = msg.make_reply()
      reply.body[None] = "I'm a bot NOT working for you."
      self.client.enqueue(reply)
      logging.warning('unhandled message from %s: %s', msg.from_, text)

  async def run(self) -> None:
    conn = self.connect()
    msgin = self.process_qin()
    await asyncio.gather(conn, msgin)

  async def connect(self) -> None:
    message_dispatcher = self.client.summon(
      aioxmpp.dispatcher.SimpleMessageDispatcher
    )

    # register a message callback here
    message_dispatcher.register_callback(
      aioxmpp.MessageType.CHAT,
      None,
      self.message_received,
    )

    while True:
      try:
        async with self.client.connected():
          self._connected.set()
          stop_event = self.make_sigint_event()
          await stop_event.wait()
          break
      except Exception:
        logger.exception('XMPP client error')
      self._connected.clear()

  def make_sigint_event(self) -> asyncio.Event:
    event = asyncio.Event()
    loop = asyncio.get_event_loop()
    loop.add_signal_handler(
      signal.SIGINT,
      event.set,
    )
    return event

  async def process_qin(self):
    while True:
      msg = await self.qin.get()
      await self._connected.wait()
      self.sendmsg(msg)

  def sendmsg(self, msg: str) -> None:
    logging.info('sending to xmpp: %s', msg)
    m = aioxmpp.Message(
      to = self.group,
      type_ = aioxmpp.MessageType.CHAT,
    )
    m.body[None] = msg
    self.client.enqueue(m)

class IrcBot:
  _watchdog_to = None
  _time_out = 200
  _connected = asyncio.Event()

  def __init__(self, config: Dict[str, Any], qin: Queue[str], qout: Queue[str]) -> None:
    ch = config['channel']
    if ch[0] != '#':
      ch = '#' + ch
    self.channel = ch
    self.nick = config['nick']
    self.realname = config['realname']
    self.server = config['server']
    self.port = config['port']
    self.password = config.get('password', None)
    self.ssl = config.get('ssl', True)

    self.qin = qin
    self.qout = qout

  async def run(self) -> None:
    conn = self.conn = asyncio.create_task(self.connect())
    msgin = self.process_qin()
    await asyncio.gather(conn, msgin)

  async def process_qin(self):
    while True:
      msg = await self.qin.get()
      await self._connected.wait()
      await self.sendmsg(msg)

  def _kick_watchdog(self) -> None:
    loop = asyncio.get_event_loop()
    if self._watchdog_to:
      self._watchdog_to.cancel()

    self._watchdog_to = loop.call_later(
      self._time_out,
      self.conn.cancel,
    )

  async def send(self, cmd: str, *args: str) -> None:
    largs = list(args)
    if largs and \
       (not largs[-1] or largs[-1][0] == ':' or re.search(r'\s', largs[-1])):
      largs[-1] = ":" + largs[-1]
    cmd = cmd.upper()
    largs.insert(0, cmd)

    logger.debug('send: %s', largs)
    d = ' '.join(largs).encode('utf-8') + b'\r\n'
    self.writer.write(d)
    await self.writer.drain()

  async def connect(self) -> None:
    while True:
      try:
        await self._connect()
      except (asyncio.CancelledError, ConnectionResetError, ConnectionAbortedError) as e:
        # FIXME: we need another indicator on timeouts so we can quit
        logging.warning('IRC connection broken, reconnecting after 1s: %r', e)
        try:
          await self.disconnect()
        except (OSError, asyncio.CancelledError) as e:
          logging.warning('disconnection failed: %r', e)
        await asyncio.sleep(1)

  async def _connect(self) -> None:
    logging.info('connecting to irc server %r...', self.server)
    self.reader, self.writer = await asyncio.open_connection(
      self.server, self.port, ssl = self.ssl,
    )
    self._kick_watchdog()

    await self.reader.readline()
    logging.info('set my nick')
    await self.send('NICK', self.nick)
    self._kick_watchdog()

    logging.info('the user command')
    await self.send('USER', self.nick, "0", "1", self.realname)
    await self.reader.readuntil(b'/MOTD')
    self._kick_watchdog()

    if self.password:
      logging.info('identifying...')
      await self.send('PRIVMSG', 'NickServ', 'identify %s %s' % (
        self.nick, self.password,
      ))
    logging.info('joining...')
    await self.send('JOIN', self.channel)
    self._connected.set()
    self._kick_watchdog()

    while True:
      msg = await self.reader.readline()
      if not msg:
        return
      self._kick_watchdog()
      await self.message_received(msg)

  async def disconnect(self) -> None:
    self._connected.clear()
    logging.info('quit irc...')
    await self.send('QUIT')
    self.writer.close()

  async def message_received(self, msgb: bytes) -> None:
    self._kick_watchdog()
    msgb = msgb[:-2]
    is_gbk = False
    try:
      msg = msgb.decode()
    except UnicodeDecodeError:
      try:
        msg = msgb.decode('gb18030')
        is_gbk = True
      except UnicodeDecodeError:
        msg = msgb.decode(errors='replace')
    logging.debug('irc received: %s', msg)
    if msg.startswith('PING :'):
      await self.pong(msg)
      return
    try:
      user, cmd, who, msg = msg.split(None, 3)
    except ValueError:
      return
    if cmd != 'PRIVMSG':
      return
    if who != self.channel:
      return
    try:
      msg = msg[1:]
      if msg.startswith('\x01ACTION '):
        msg = '*' + msg[7:-1]
    except IndexError:
      return
    username = user[1:user.find('!')]
    if is_gbk:
      msg = '(in GBK) ' + msg
    msg = COLORS.sub('', msg)
    msg = CONTROLCHARS.sub('', msg)
    logging.info('IRC msg: %s: %r', username, msg)
    if username in TG_BOTS:
      m = TG_MSG.match(msg)
      if m:
        username = m.group('nick')
        if m.group('reply'):
          replyee = m.group('reply')
          if replyee == XMPP_BOT and m.group('reply2'):
            replyee = m.group('reply2')[1:-1]
          msg = '%s: %s' % (replyee, m.group('msg'))
        else:
          msg = m.group('msg')
    elif username == TOX_BOT:
      m = TOX_MSG.match(msg)
      if m:
        username = m.group('nick')
        msg = m.group('msg')

    await self.qout.put('[%s] %s' % (username, msg))

  async def pong(self, msg: str) -> None:
    await self.send('PONG', self.nick)
    logging.info('PONG sent')

  async def sendmsg(self, msg: str) -> None:
    logging.info('sending to irc: %s', msg)
    # 'PRIVMSG' ' ' channel ' ' ':' msg '\r\n'
    # 300 is assumed max length
    size = 512 - (12 + len(self.channel))
    for line in msg.split('\n'):
      for m in splitmsg(line, size):
        await self.send('PRIVMSG', self.channel, m)
    self._kick_watchdog()

async def main(configfile: str) -> None:
  with open(configfile) as f:
    config = toml.load(f)

  irc2xmpp: Queue[str] = Queue()
  xmpp2irc: Queue[str] = Queue()
  xmppbot = XmppBot(config['xmpp'], irc2xmpp, xmpp2irc)
  ircbot = IrcBot(config['irc'], xmpp2irc, irc2xmpp)
  a = asyncio.create_task(xmppbot.run())
  b = asyncio.create_task(ircbot.run())
  await asyncio.gather(a, b)

if __name__ == '__main__':
  import argparse
  import nicelogger

  parser = argparse.ArgumentParser(
    description='Connect XMPP and IRC channel together')
  parser.add_argument('-l', '--logging',
                      choices=('debug', 'info', 'warning', 'error'), default='info',
                      help='logging level (default: info)')
  parser.add_argument('configfile',
                      help='the config file to use')
  args = parser.parse_args()
  nicelogger.enable_pretty_logging(getattr(logging, args.logging.upper()))

  asyncio.run(main(args.configfile))
